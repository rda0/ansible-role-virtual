---
- name: set fact virtual_mount_path
  set_fact:
    virtual_mount_path: "{{ virtual_mount_base_path }}/{{ virtual_guest_name }}_{{ 1000000 | random | hash('sha1') }}"

- name: "create main disks ({{ ', '.join(virtual_disks_main) }}) lv(s)"
  lvol:
    vg: '{{ virtual_disk_vg }}'
    lv: '{{ virtual_guest_name }}-{{ item }}'
    size: '{{ virtual_disks_main_size[item] }}'
  loop: '{{ virtual_disks_main }}'

- name: "clone disks ({{ ', '.join(virtual_disks_main) }}) from template"
  command: 'dd if={{ virtual_template_base }}-{{ item }} of=/dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-{{ item }} bs=1M'
  loop: '{{ virtual_disks_main }}'

- name: check root filesystem
  command: 'e2fsck -pf /dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root'

- name: change root filesystem uuid
  shell: 'echo y | tune2fs /dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root -U random'

- name: resize root filesystem
  command: 'resize2fs /dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root'

- name: create root mount dir
  file:
    path: '{{ virtual_mount_path }}/root'
    state: directory

- name: mount root filesystem
  command: 'mount /dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root {{ virtual_mount_path }}/root'
  args:
    warn: false

- name: set hostname
  shell: 'echo "{{ virtual_guest_name }}" > {{ virtual_mount_path }}/root/etc/hostname'

- name: include extra disks
  include: create-common-extra-disks.yml
  when: virtual_disks

- name: umount root filesystem
  command: 'umount /dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root'

- name: remove mount dir
  file:
    path: '{{ virtual_mount_path }}'
    state: absent

- name: include host boot
  include: create-common-host-boot.yml
  when: virtual_boot_method == 'host'

- name: create guest
  command: |
    virt-install \
    --name={{ virtual_guest_name }} \
    --virt-type=kvm \
    {% if virtual_memory_hotpluggable %}
    --cpu=model=host,cell0.id=0,cell0.cpus={{ virtual_numa_cell_cpus }},cell0.memory={{ virtual_numa_cell_memory }} \
    --memory=memory={{ virtual_memory }},hotplugmemorymax={{ virtual_memory_max }},hotplugmemoryslots={{ virtual_memory_slots }} \
    {% else %}
    --cpu=host \
    --memory={{ virtual_memory }} \
    {% endif %}
    {% if virtual_cpus_hotpluggable %}
    --vcpus=vcpus={{ virtual_cpus }},maxvcpus={{ virtual_cpus_max }} \
    {% else %}
    --vcpus={{ virtual_cpus }} \
    {% endif %}
    {% if virtual_memory_hugepages %}
    --memorybacking=hugepages=yes,size={{ virtual_memory_hugepages_size }},unit={{ virtual_memory_hugepages_unit }} \
    {% endif %}
    {% if virtual_memory_balloon %}
    --memballoon=virtio \
    {% else %}
    --memballoon=none \
    {% endif %}
    --controller=type=scsi,model=virtio-scsi \
    {% if virtual_boot_method == 'part' %}
    --disk=path=/dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-boot,bus=scsi,cache=none,address.type=drive,address.controller=0,address.bus=0,address.target=0,address.unit=0,boot_order=1 \
    {% endif %}
    --disk=path=/dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root,bus=scsi,cache=none,address.type=drive,address.controller=0,address.bus=0,address.target={{ virtual_disk_boot_index }},address.unit={{ virtual_disk_boot_index }}{{ '' if virtual_boot_method == 'part' else ',boot_order=1' }} \
    {% for disk in virtual_disks|default([]) %}
    --disk=path=/dev/{{ (disk.vg|default(virtual_disk_vg)) }}/{{ virtual_guest_name }}{{ disk.mount|default('/dev/sd' + virtual_disks_letters[loop.index - 1])|replace('/', '-') }},bus=scsi,cache=none,address.type=drive,address.controller=0,address.bus=0,address.target={{ loop.index + virtual_disk_boot_index|int }},address.unit={{ loop.index + virtual_disk_boot_index|int }} \
    {% endfor %}
    --import \
    --os-type=linux \
    --os-variant={{ os_variant }} \
    --console=pty,target_type=serial \
    {% if virtual_boot_method == 'host' %}
    --boot=kernel={{ virtual_kernel_base_path }}/{{ virtual_guest_name }}/vmlinuz,initrd={{ virtual_kernel_base_path }}/{{ virtual_guest_name }}/initrd.img,kernel_args="{{ virtual_kernel_args }}" \
    {% endif %}
    {% if virtual_mac is defined %}
    --network=bridge={{ virtual_bridge }},model=virtio,target={{ virtual_interface_name }},mac={{ virtual_mac }} \
    {% else %}
    --network=bridge={{ virtual_bridge }},model=virtio,target={{ virtual_interface_name }} \
    {% endif %}
    --nographics \
    --noautoconsole \
    --autostart
