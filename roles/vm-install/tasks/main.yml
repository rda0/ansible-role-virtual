---
- name: set vm vars for ({{ dist }})
  include_vars: "{{ dist }}/vm.yml"

- name: set preseed vars for ({{ dist }})
  include_vars: "{{ dist }}/preseed.yml"

- name: create vm dir
  file: path={{ item }} state=directory owner=root group=root mode=0700
  with_items:
    - "{{ vm_path }}/{{ guest_name }}"

- name: create vm web dir
  file: path={{ item }} state=directory owner=root group=root mode=0755
  with_items:
    - "{{ web_path }}/{{ guest_name }}"

- name: create preseed.cfg
  template:
    src: "{{ template_type }}/preseed-nolvm.cfg"
    dest: "{{ vm_path }}/{{ guest_name }}/{{ initrd_inject }}"

- name: create post-install.sh
  template:
    src: "{{ template_type }}/post-install.sh"
    dest: "{{ web_path }}/{{ guest_name }}/post-install.sh"
    owner: root
    group: root
    mode: 0644

- stat:
    path: '/dev/{{ vg }}/{{ guest_name }}-root'
  register: guest_lvm_root

- fail:
    msg: 'guest lvm already exists!'
  when: guest_lvm_root.stat.exists is defined and guest_lvm_root.stat.exists == True

- stat:
    path: '/etc/libvirt/qemu/{{ guest_name }}.xml'
  register: guest_xml

- fail:
    msg: 'guest xml already exists!'
  when: guest_xml.stat.exists is defined and guest_xml.stat.exists == True

- name: create lv
  lvol:
    vg: '{{ vg }}'
    lv: '{{ guest_name }}-root'
    size: '{{ disk_size }}'

- name: install vm
  command: |
    virt-install \
    --virt-type=kvm \
    --cpu=host \
    --name={{ guest_name }} \
    --vcpus={{ vcpus }} \
    --memory={{ memory }} \
    --memorybacking=hugepages=yes \
    --memballoon=virtio \
    --controller=type=scsi,model=virtio-scsi \
    --disk=path=/dev/{{ vg }}/{{ guest_name }}-root,bus=scsi,cache=none \
    --location={{ location }} \
    --os-type=linux \
    --os-variant={{ os_variant }} \
    --console=pty,target_type=serial \
    --initrd-inject={{ vm_path }}/{{ guest_name }}/preseed.cfg \
    --extra-args='auto=true priority=critical console=ttyS0,115200n8 serial elevator=noop' \
    {% if mac is defined %}
    --network=bridge={{ bridge }},model=virtio,mac={{ mac }} \
    {% else %}
    --network=bridge={{ bridge }},model=virtio \
    {% endif %}
    --nographics \
    --noautoconsole \
    --autostart

- name: wait until vm is shut off
  command: /usr/bin/virsh domstate {{ guest_name }}
  register: result
  until: result.stdout.find("shut off") != -1
  retries: 1000
  delay: 10

- name: start vm
  command: /usr/bin/virsh start {{ guest_name }}
