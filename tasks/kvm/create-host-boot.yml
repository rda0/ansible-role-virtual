---
- stat:
    path: "/dev/{{ (item.1.vg|default(virtual_disk_vg)) }}/{{ virtual_guest_name }}{{ item.1.mount|default('/dev/sd' + virtual_disks_letters[item.0])|replace('/', '-') }}"
  register: virtual_disks_stat
  with_indexed_items: '{{ virtual_disks }}'

- fail:
    msg: 'guest disk already exists: {{ item.invocation.module_args.path }}'
  when: item.stat.exists is defined and item.stat.exists == True
  with_items: '{{ virtual_disks_stat.results }}'

- name: create libvirt qemu hook
  copy:
    src: qemu
    dest: /etc/libvirt/hooks/qemu
    mode: 0755

- name: set fact virtual_mount_path
  set_fact:
    virtual_mount_path: "{{ virtual_mount_base_path }}/{{ virtual_guest_name }}_{{ 1000000 | random | hash('sha1') }}"

- name: create root lv
  lvol:
    vg: '{{ virtual_disk_vg }}'
    lv: '{{ virtual_guest_name }}-root'
    size: "{{ virtual_disk_size|default('2G') }}"

- name: create disk lvs
  lvol:
    vg: '{{ (item.1.vg|default(virtual_disk_vg)) }}'
    lv: "{{ virtual_guest_name }}{{ item.1.mount|default('/dev/sd' + virtual_disks_letters[item.0])|replace('/', '-') }}"
    size: "{{ item.1.size }}"
  with_indexed_items: '{{ virtual_disks }}'

- name: dump root filesystem from template lv
  command: 'dd if=/dev/{{ virtual_template_vg }}/{{ virtual_template_name }}-{{ virtual_codename }}-root of=/dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root bs=1M'
  when: not virtual_template_type == 'file'

- name: dump root filesystem from template image
  command: 'dd if={{ virtual_template_path }}/{{ virtual_template_name }}-{{ virtual_codename }}-root of=/dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root bs=1M'
  when: virtual_template_type == 'file'

- name: check root filesystem
  command: 'e2fsck -pf /dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root'

- name: change root filesystem uuid
  shell: 'echo y | tune2fs /dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root -U random'

- name: resize root filesystem
  command: 'resize2fs /dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root'

- name: create root mount dir
  file:
    path: '{{ virtual_mount_path }}/root'
    state: directory

- name: create disk mount dirs
  file:
    path: "{{ virtual_mount_path }}/{{ item.mount[1:]|replace('/', '-') }}"
    state: directory
  with_items: '{{ virtual_disks | selectattr("mount", "defined") | list }}'

- name: mount root filesystem
  command: 'mount /dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root {{ virtual_mount_path }}/root'
  args:
    warn: false

- name: set hostname
  shell: 'echo "{{ virtual_guest_name }}" > {{ virtual_mount_path }}/root/etc/hostname'

- name: add disks to fstab
  shell: "echo '/dev/sd{{ virtual_disks_letters[item.0] }}  {{ item.1.mount }}  {{ (item.1.fs|default(virtual_disk_fs)) }} {{ (item.1.options|default(virtual_disk_mount_options)) }} 0 2' >> {{ virtual_mount_path }}/root/etc/fstab"
  with_indexed_items: '{{ virtual_disks | selectattr("mount", "defined") | list }}'

- name: make disk filesystems
  command: "mkfs.{{ (item.fs|default(virtual_disk_fs)) }} /dev/{{ (item.vg|default(virtual_disk_vg)) }}/{{ virtual_guest_name }}{{ item.mount|replace('/', '-') }}"
  with_items: '{{ virtual_disks | selectattr("mount", "defined") | list }}'

- name: create mount points in root filesystem
  file:
    path: "{{ virtual_mount_path }}/root{{ item.mount }}"
    state: directory
  with_items: '{{ virtual_disks | selectattr("mount", "defined") | list }}'

- name: mount disk filesystems
  command: "mount /dev/{{ (item.vg|default(virtual_disk_vg)) }}/{{ virtual_guest_name }}{{ item.mount|replace('/', '-') }} {{ virtual_mount_path }}/{{ item.mount[1:]|replace('/', '-') }}"
  args:
    warn: false
  with_items: '{{ virtual_disks | selectattr("mount", "defined") | list }}'

- name: move files to separate disks
  shell: "mv {{ virtual_mount_path }}/root{{ item.mount }}/* {{ virtual_mount_path }}/{{ item.mount[1:]|replace('/', '-') }}/; umount /dev/{{ (item.vg|default(virtual_disk_vg)) }}/{{ virtual_guest_name }}{{ item.mount|replace('/', '-') }}; mount /dev/{{ (item.vg|default(virtual_disk_vg)) }}/{{ virtual_guest_name }}{{ item.mount|replace('/', '-') }} {{ virtual_mount_path }}/root{{ item.mount }}"
  args:
    warn: false
  ignore_errors: yes
  with_items: '{{ virtual_disks | selectattr("mount", "defined") | list }}'

- name: umount disk filesystems
  command: "umount /dev/{{ (item.vg|default(virtual_disk_vg)) }}/{{ virtual_guest_name }}{{ item.mount|replace('/', '-') }}"
  with_items: '{{ virtual_disks | selectattr("mount", "defined") | list | reverse | list }}'

- name: umount root filesystem
  command: 'umount /dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root'

- name: remove mount dir
  file:
    path: '{{ virtual_mount_path }}'
    state: absent

- name: create kernel storage directory
  file:
    path: '{{ virtual_kernel_base_path }}/{{ virtual_guest_name }}'
    state: directory

- name: extract kernel from disk
  command: 'virt-get-kernel --unversioned-names --add {{ virtual_kernel_disk_path }} --output {{ virtual_kernel_base_path }}/{{ virtual_guest_name }}'

- name: create vm
  command: |
    virt-install \
    --name={{ virtual_guest_name }} \
    --virt-type=kvm \
    {% if virtual_memory_hotpluggable %}
    --cpu=model=host,cell0.id=0,cell0.cpus={{ virtual_numa_cell_cpus }},cell0.memory={{ virtual_numa_cell_memory }} \
    --memory=memory={{ virtual_memory }},hotplugmemorymax={{ virtual_memory_max }},hotplugmemoryslots={{ virtual_memory_slots }} \
    {% else %}
    --cpu=host \
    --memory={{ virtual_memory }} \
    {% endif %}
    {% if virtual_cpus_hotpluggable %}
    --vcpus=vcpus={{ virtual_cpus }},maxvcpus={{ virtual_cpus_max }} \
    {% else %}
    --vcpus={{ virtual_cpus }} \
    {% endif %}
    {% if virtual_memory_hugepages %}
    --memorybacking=hugepages=yes,size={{ virtual_memory_hugepages_size }},unit={{ virtual_memory_hugepages_unit }} \
    {% endif %}
    {% if virtual_memory_balloon %}
    --memballoon=virtio \
    {% else %}
    --memballoon=none \
    {% endif %}
    --controller=type=scsi,model=virtio-scsi \
    --disk=path=/dev/{{ virtual_disk_vg }}/{{ virtual_guest_name }}-root,bus=scsi,cache=none,address.type=drive,address.controller=0,address.bus=0,address.target=0,address.unit=0,boot_order=1 \
    {% for disk in virtual_disks|default([]) %}
    --disk=path=/dev/{{ (disk.vg|default(virtual_disk_vg)) }}/{{ virtual_guest_name }}{{ disk.mount|default('/dev/sd' + virtual_disks_letters[loop.index - 1])|replace('/', '-') }},bus=scsi,cache=none,address.type=drive,address.controller=0,address.bus=0,address.target={{ loop.index + virtual_disk_boot_index|int }},address.unit={{ loop.index + virtual_disk_boot_index|int }} \
    {% endfor %}
    --import \
    --os-type=linux \
    --os-variant={{ os_variant }} \
    --console=pty,target_type=serial \
    --boot=kernel={{ virtual_kernel_base_path }}/{{ virtual_guest_name }}/vmlinuz,initrd={{ virtual_kernel_base_path }}/{{ virtual_guest_name }}/initrd.img,kernel_args="{{ virtual_kernel_args }}" \
    {% if virtual_mac is defined %}
    --network=bridge={{ virtual_bridge }},model=virtio,target={{ virtual_interface_name }},mac={{ virtual_mac }} \
    {% else %}
    --network=bridge={{ virtual_bridge }},model=virtio,target={{ virtual_interface_name }} \
    {% endif %}
    --nographics \
    --noautoconsole \
    --autostart
